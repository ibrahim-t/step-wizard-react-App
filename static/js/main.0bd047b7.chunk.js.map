{"version":3,"sources":["widgets/UserInfo.js","widgets/VehicleApp.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","minWidth","paddingTop","t","display","margin","transform","title","fontSize","pos","marginBottom","UserInfo","props","classes","userInfo","boughtDate","Date","_d","toLocaleDateString","lastDate","Grid","item","xs","Card","className","CardContent","Typography","steps","stepId","stepName","VehicleApp","onUpdateRecord","data","setState","currentFormRecord","onNextStepClick","currentStep","state","stepProgress","formData","onUpdateFormData","record","renderForms","bind","formSchema","totalStep","Object","keys","length","style","border","padding","this","LinearProgress","variant","value","valueBuffer","Container","justify","React","Component","CustomerForm","useState","custName","setCustName","email","setEmail","mobileNo","setMobileNo","TextField","id","placeholder","type","onChange","e","target","label","error","test","validateEmail","Button","onClick","customerName","color","OTPForm","otp","setOtp","Otp","VehicleForm","vehicleNo","setVehicleNo","model","setModel","setVariant","manufacturingYear","setManufacturingYear","price","setPrice","DetailForm","setBoughtDate","setLastDate","utils","DateFnsUtils","format","KeyboardButtonProps","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.0bd047b7.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n    root: {\n        minWidth: 275,\n        paddingTop:\"10px\"\n    },\n    t: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(0.8)',\n    },\n    title: {\n        fontSize: 14,\n    },\n    pos: {\n        marginBottom: 12,\n    },\n});\nexport const UserInfo = (props) => {\n    const classes = useStyles();\n    const userInfo = props.userInfo;\n    const boughtDate = new Date(userInfo[\"boughtDate\"]._d).toLocaleDateString();\n    const lastDate = new Date(userInfo[\"lastDate\"]._d).toLocaleDateString();\n    return <Grid item xs={6}>\n        <Card className={classes.root}>\n            <CardContent>\n                <Typography >\n                    Customer Name : {userInfo[\"customerName\"]}\n                </Typography>\n                <Typography>\n                    email-Id  : {userInfo[\"email\"]}\n                </Typography>\n                <Typography>\n                    mobile No.  : {userInfo[\"mobileNo\"]}\n                </Typography>\n\n                <Typography>\n                    Vehicle No  : {userInfo[\"vehicleNo\"]}\n                </Typography>\n                <Typography>\n                    Model  : {userInfo[\"model\"]}\n                </Typography>\n                <Typography>\n                    variant  : {userInfo[\"variant\"]}\n                </Typography>\n                <Typography>\n                    Price  : {userInfo[\"price\"]}\n                </Typography>\n                <Typography>\n                    Bought Date  : {boughtDate}\n                </Typography>\n                <Typography>\n                    Last Date  : {lastDate}\n                </Typography>\n            </CardContent>\n        </Card >\n    </Grid>\n\n}","import React, { useState } from \"react\";\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { Button } from \"@material-ui/core\";\nimport TextField from '@material-ui/core/TextField';\nimport DateFnsUtils from '@date-io/moment';\nimport Grid from '@material-ui/core/Grid';\nimport { UserInfo } from \"./UserInfo\"\n\n\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nconst steps = [\n    {\n        stepId: 0, stepName: \"vehicle details\",\n    },\n    {\n        stepId: 1, stepName: \"OTP Verification\",\n    },\n    {\n        stepId: 2, stepName: \"Vehicle Details\",\n    },\n    {\n        stepId: 3, stepName: \"Vehicle Duration\",\n    },\n]\n\nexport class VehicleApp extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentStep: 0,\n            stepProgress: 0,\n            totalStep: Object.keys(steps).length,\n            formData: {}\n        }\n        this.onNextStepClick = this.onNextStepClick.bind(this);\n        this.onUpdateFormData = this.onUpdateFormData.bind(this);\n        this.onUpdateRecord = this.onUpdateRecord.bind(this)\n    }\n\n    onUpdateRecord = (data) => {\n        this.setState({ currentFormRecord: data })\n    }\n    onNextStepClick = (data) => {\n        this.setState({ currentStep: this.state.currentStep + 1, stepProgress: this.state.stepProgress + 25, formData: { ...this.state.formData, ...data } })\n    }\n    onUpdateFormData = (data) => {\n        this.setState({ record: data })\n    }\n    renderForms = () => {\n        const { currentStep } = this.state;\n        switch (currentStep) {\n            case 0:\n                return <CustomerForm currentStep={currentStep} formData={this.state.formData} onNextStepClick={this.onNextStepClick.bind(this)} formSchema={steps[currentStep]} />\n            case 1:\n                return <OTPForm currentStep={currentStep} formData={this.state.formData} onNextStepClick={this.onNextStepClick.bind(this)} formSchema={steps[currentStep]} />\n            case 2:\n                return <VehicleForm currentStep={currentStep} formData={this.state.formData} onNextStepClick={this.onNextStepClick.bind(this)} formSchema={steps[currentStep]} />\n            case 3:\n                return <DetailForm currentStep={currentStep} formData={this.state.formData} onNextStepClick={this.onNextStepClick.bind(this)} formSchema={steps[currentStep]} />\n            default:\n                return <UserInfo userInfo={this.state.formData} />\n        }\n    }\n    render() {\n        return <div style={{ margin: \"5px\", border: \"5px\", padding: \"10px\" }}>\n\n            <h3>{`${this.state.currentStep} of  ${this.state.totalStep} Completed`}</h3>\n            <LinearProgress variant=\"determinate\" value={this.state.stepProgress} valueBuffer={100} />\n            <Grid Container justify=\"center\">\n                {this.renderForms()}\n            </Grid>\n        </div>\n\n    }\n}\n\n\nconst CustomerForm = (props) => {\n    const { formSchema } = props;\n    const [custName, setCustName] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [mobileNo, setMobileNo] = useState();\n    // const [fieldValue, setFieldValue] = useState(\"\");\n    function validateEmail(email) {\n        const re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n        return re.test(email);\n    }\n    const updateRecord = () => {\n        const data = {\n            customerName: custName,\n            email,\n            mobileNo,\n        }\n        props.onNextStepClick(data)\n    }\n    return <div>\n        <TextField className=\"input-field\" id=\"customerName\" placeholder=\"Enter Customer Name\" type=\"text\" value={custName} onChange={(e) => setCustName(e.target.value)} label=\"Customer Name\" variant=\"outlined\" /><br />\n        <TextField className=\"input-field\" id=\"email\" placeholder=\"Enter email Name\" type=\"email\" value={email} onChange={(e) => {\n            setEmail(e.target.value)\n        }}\n            error={email === \"\" ? false : validateEmail(email) ? false : true}\n            label=\"Email\" variant=\"outlined\" /><br />\n\n        <TextField className=\"input-field\" id=\"mobileNo\" placeholder=\"Enter mobile No\" type=\"number\" value={mobileNo} onChange={(e) => setMobileNo(e.target.value)} label=\"Mobile No.\" variant=\"outlined\" /><br />\n        <Button onClick={updateRecord} color=\"primary\">Next</Button>\n    </div>\n\n}\n\nconst OTPForm = (props) => {\n    const { formSchema } = props;\n    const [otp, setOtp] = useState(\"\");\n    const updateRecord = () => {\n        const data = {\n            Otp: otp,\n        }\n        props.onNextStepClick(data)\n    }\n    return <div><h3>{`OTP has been sent to registered phone No ${props.formData.mobileNo}`} </h3>\n        <TextField id=\"Otp\" placeholder=\"Enter OTP sent to you mobile no\" type=\"number\" value={otp} onChange={(e) => setOtp(e.target.value)} label=\"Enter OTP\" variant=\"outlined\" /><br />\n        <Button onClick={updateRecord} color=\"primary\">Next</Button>\n    </div>\n\n}\n\nconst VehicleForm = (props) => {\n    const { formSchema } = props;\n    const [vehicleNo, setVehicleNo] = useState(\"\");\n\n    const [model, setModel] = useState(\"\");\n    const [variant, setVariant] = useState(\"\");\n    const [manufacturingYear, setManufacturingYear] = useState(\"\");\n    const [price, setPrice] = useState();\n\n    const updateRecord = () => {\n        const data = {\n            vehicleNo,\n            model, variant, manufacturingYear, price\n        }\n        props.onNextStepClick(data)\n    }\n    return <div>\n        <TextField className=\"input-field\" id=\"Vehicle No\" placeholder=\"Enter Vehicle No\" type=\"text\" value={vehicleNo} onChange={(e) => setVehicleNo(e.target.value)} label=\"Customer Name\" variant=\"outlined\" /><br />\n        <TextField className=\"input-field\" id=\"Model\" placeholder=\"Enter model Name\" type=\"email\" value={model} onChange={(e) => { setModel(e.target.value) }} label=\"Model\" variant=\"outlined\" /><br />\n        <TextField className=\"input-field\" id=\"Variant Type\" placeholder=\"Enter Varient Type\" type=\"text\" value={variant} onChange={(e) => setVariant(e.target.value)} label=\"Variant\" variant=\"outlined\" /><br />\n        <TextField className=\"input-field\" id=\"Manufacturing Year\" placeholder=\"Enter Manufacturing Year\" type=\"number\" value={manufacturingYear} onChange={(e) => setManufacturingYear(e.target.value)} label=\"Mobile No.\" variant=\"outlined\" /><br />\n        <TextField className=\"input-field\" id=\"Price\" placeholder=\"Enter mobile No\" type=\"number\" value={price} onChange={(e) => setPrice(e.target.value)} label=\"Price\" variant=\"outlined\" /><br />\n        <Button onClick={updateRecord} color=\"primary\">Next</Button>\n\n    </div>\n\n}\n\nconst DetailForm = (props) => {\n    const { formSchema } = props;\n    const [boughtDate, setBoughtDate] = useState(\"\");\n    const [lastDate, setLastDate] = useState(\"\");\n    const updateRecord = () => {\n        const data = {\n            boughtDate,\n            lastDate\n        }\n        props.onNextStepClick(data)\n    }\n\n    return <div>\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n\n            <KeyboardDatePicker\n                margin=\"normal\"\n\n                id=\"boughtDate\"\n                label=\" Select Bought Date\"\n                format=\"MM/dd/yyyy\"\n                value={boughtDate ? boughtDate : new Date()}\n                onChange={setBoughtDate}\n                KeyboardButtonProps={{\n                    'aria-label': 'change date',\n                }}\n            /><br />\n            <KeyboardDatePicker\n                margin=\"normal\"\n                id=\"lastDate\"\n                label=\" Select Last Date\"\n                format=\"MM/dd/yyyy\"\n                value={lastDate ? lastDate : new Date()}\n                onChange={setLastDate}\n                KeyboardButtonProps={{\n                    'aria-label': 'change date',\n                }}\n            /><br />\n            <Button onClick={updateRecord} color=\"primary\">Next</Button>\n\n        </MuiPickersUtilsProvider>\n\n\n\n    </div>\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { VehicleApp } from \"./widgets/VehicleApp\"\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <VehicleApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}